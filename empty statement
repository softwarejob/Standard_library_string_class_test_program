在 C++ 中，空陳述式（empty statement）是指一個沒有任何操作的語句，它只包含一個分號 ;。
empty statement通常用於那些需要語法上有陳述式但不需要實際執行任何操作的地方。

以下是一些示例說明如何使用empty statement：

1.在for statement:

#include <iostream>

int main() {
    int i;
    for (i = 0; i < 10; i++) {
        // 這裡是空陳述式，它不執行任何操作
        ;
    }
    std::cout << "i 的值是：" << i << std::endl; // i 的值現在是 10
    return 0;
}

2.在 if-else statement:

#include <iostream>

int main() {
    int x = 5;
    if (x > 0) {
        std::cout << "x 是正數" << std::endl;
    } else {
        // 如果 x 不大於 0，則執行空陳述式
        ;
    }
    return 0;
}


3.在 switch statement:

#include <iostream>

int main() {
    int option = 2;
    switch(option) {
        case 1:
            std::cout << "選擇了選項 1" << std::endl;
            break;
        case 2:
            // 如果選擇了選項 2，執行空陳述式
            ;
        case 3:
            std::cout << "選擇了選項 3" << std::endl;
            break;
        default:
            std::cout << "未知選項" << std::endl;
            break;
    }
    return 0;
}


空的 if statement在程式中沒有直接的功能，但在某些情況下，它可能有助於提高程式的可讀性或符合語法要求。
空的 if statement僅包含 if 條件表達式和一個分號，沒有任何實際的程式碼。這在以下情況下可能會發生：
空陳述式在程式設計中通常用於以下情況：
4.程式邏輯尚未確定：當你在開發程式時，可能想要先留出 if 陳述式的位置，但尚未確定要執行什麼操作。
   這時你可以使用空的 if 陳述式，稍後再填入具體的程式碼。
在if statement:

#include <iostream>

int main() {
    int x = 5;
    if (x > 0) {
        // 此處尚未確定要執行什麼操作
        ;
    }
    return 0;
}

empty statement在程式設計中通常用於以下情況：
1.程式結構需求：有些情況下，編程語言的語法要求必須存在一個陳述式，但是在那個位置上不需要執行任何操作。這時候可以使用空陳述式來滿足語法要求。
2.保留空間：有時候，開發者可能會在程式碼中放置空陳述式，以便將來可能需要的程式碼放在同一個位置，這樣可以保留一個空間，以便未來的擴展或修改。
3.臨時註解：在開發過程中，開發者可能會暫時禁用一段程式碼，但又不想完全刪除它。在這種情況下，可以將該程式碼放在空陳述式中，這樣可以讓它暫時失效，
   但保留在程式碼中，以便稍後再啟用。
‼️儘管空陳述式有這些用途，但在一般情況下，最好避免過度使用，因為它們可能會導致代碼讀者的困惑。
   寫清晰並且不包含不必要的陳述式的程式碼是一個良好的編程實踐。‼️
------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------------------------------------------
🚨注意!!🚨

在if or if...else statement 中的括號條件後面放置分號;
會導致if statement 邏輯錯誤和if...else statement 語法錯誤
1. 在 if 語句中放置分號 ;：

#include <iostream>

int main() {
    int x = 5;
    if (x > 0); // 此處放置了分號
    {
        std::cout << "x 是正數" << std::endl; // 這句話將總是執行，與 x 的值無關
    }
    return 0;
}
在這個例子中，如果 x 大於 0，即使條件成立，分號 ; 將導致 if 語句的內容被視為空，
因此即使 x 是正數，"x 是正數" 的語句也會被執行。這導致了邏輯錯誤。


2. 在 if...else 語句中放置分號 ;：

#include <iostream>

int main() {
    int x = 5;
    if (x > 0); // 此處放置了分號
    {
        std::cout << "x 是正數" << std::endl; // 這句話將總是執行，與 x 的值無關
    }
    else {
        std::cout << "x 是負數或零" << std::endl; // 這句話永遠不會執行
    }
    return 0;
}

在這個例子中，else 與前面的 if 被認為是一個獨立的語句，因此編譯器會報告語法錯誤，因為 else 出現在了沒有對應的 if 的情況下。

總的來說，不應該在 if 或 if...else 語句的條件後面放置分號 ;，這樣會導致語法錯誤或邏輯錯誤。